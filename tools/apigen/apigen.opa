import stdlib.io.file

default_config_file = "config"

config_file = Mutable.make(default_config_file)
args_style = Mutable.make(option(style) none)

args =
  { init: void,
    parsers: [
      { CommandLine.default_parser with
        names: ["--config"],
        param_doc: "FILENAME",
        description: "Sets the name of the configuration file (default: \"{default_config_file}\")",
        function on_param(state) {
          parser {
          case file=(.*):
            file = Text.to_string(file)
            config_file.set(file);
            {no_params: state}
          }
        }
      },
      { CommandLine.default_parser with
        names: ["--style"],
        param_doc: "js-like/classic",
        description: "Overrides the style in the config file (default: classic)",
        function on_param(state) {
          parser {
          case style=(.*):
            match (Text.to_string(style)) {
            case "js-like": args_style.set({some:{js_like}});
            case "classic": args_style.set({some:{classic}});
            default: @fail("Unknown style: {style}");
            }
            {no_params: state}
          }
        }
      }
    ],
    anonymous: [],
    title: "API generator"
  }

function gen_header(config config, context context) {
  copyright =
    match (get_int_parameter(config,"since",0)) {
    case 0: dcmnts(config.copyright);
    case since:
      this_year = Date.get_year(Date.now())
      from_to = if (this_year - since <= 0) "{this_year}" else "{since}-{this_year}"
      dcmnts(List.map(String.replace("%%SINCE%%",from_to,_),config.copyright))
    }
  List.flatten([
    if (get_bool_parameter(config,"emacs_mode_line",false)) [dcmnt("-*-opa-*-")] else [],
    if (config.copyright != []) [copyright] else [],
    [dcmnt("WARNING: This file has been generated by apigen.opa, DO NOT EDIT.")],
    if (get_bool_parameter(config,"output_date",false)) [dcmnt("Date: {Date.to_string(Date.now())}")] else [],
    [dcmnt("Config file: {config_file.get()}"),
     dcmnt("Module name: {config.name}")],
    match (get_parameter(config, "endpoint", "")) { case "": []; case endpoint: [dcmnt("Endpoint: {endpoint}")]; },
    [dcmnt("Endianness: {string_of_le(get_le(config))}")],
    if (get_parameter(config, "oauth", "") != "") [dcmnt("OAuth: {get_oauth(config)}")] else [],
    [dcmnt("Style: {styled(context,"JS-like","Classic")}")],
    if (config.docs != []) [ddocs(config.docs)] else [],
    match (get_parameter(config,"package","")) { case "": []; case pkg: [dvb("package {pkg}")]; },
    [dvb("import stdlib.core"),
     dvb("import stdlib.apis.apigenlib"),
     dpvt, dvb("U = Pack.Unser")],
    if (get_int_parameter(config,"debug",0) > 0)
      [dpvt,dstmnt(asgn(pid("bindump"),typedexp(evb("%% BslPervasives.bindump %%"),tyname("binary -> string")))),
       dblnk]
    else []
  ])
}

function gen_type(config config, name, params) {
  typdef("{config.name}.{name}",
         ctyp([List.map(function (param param) {
                function optional(t) { if (param.optional) typopt(tyname(t)) else tyname(t) }
                (param.name,optional(string_of_typ(config, param.typ)))
               },params)]))
}

function gen_types(config config) {
  dspace(List.append(List.map(function (ty) { gen_type(config, ty.name, ty.params) }, config.types),
                     List.map(function (def) { gen_type(config, "{def.name}_options", def.params) },config.defs)))
}

function gen_external_code(config config) {
  if (config.extcode != []) {
    List.flatten([[dcmnt("External code"),dblnk],
                  List.map(dvb,List.rev(config.extcode)),
                  [dblnk,dcmnt("End external code"),dblnk]])
  } else []
}

function run() {
  CommandLine.filter(args)
  //jlog("config_file={config_file.get()}")
  config = read_config(config_file.get())
  style =
    match (args_style.get()) {
    case {some:style}: style;
    case {none}:
      match (get_parameter(config,"style","classic")) {
      case "classic"|"cl": {classic};
      case "jslike"|"js-like"|"js": {js_like};
      case style: @fail("Bad style: {style}");
      }
    }
  //jlog("config:{config}")
  context = init_context(style)
  opa hdr = gen_header(config,context)
  opa typs = gen_types(config)
  block api = gen_api(config)
  block messages = gen_messages(config)
  opa mod = [dmod(config.name,
              if (get_bool_parameter(config,"oauth",false)) [ptid("params",tyname("OAuth.parameters"))] else [],
              List.flatten([api,messages]))]
  opa ext = gen_external_code(config)
  opa last = [dcmnt("End of {config.name}")]
  opa = List.flatten([hdr, typs, mod, ext, last])
  println(Text.to_string(opatt(context,opa)))
}

Scheduler.push(run)
