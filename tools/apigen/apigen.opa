import stdlib.io.file

default_config_file = "config"

config_file = Mutable.make(default_config_file)

args =
  { init: void,
    parsers: [
      { CommandLine.default_parser with
        names: ["--config"],
        param_doc: "FILENAME",
        description: "Sets the name of the configuration file (default: \"{default_config_file}\")",
        function on_param(state) {
          parser {
          case file=(.*):
            file = Text.to_string(file)
            config_file.set(file);
            {no_params: state}
          }
        }
      }
    ],
    anonymous: [],
    title: "API generator"
  }

function output_header(config config) {
  if (get_bool_parameter(config,"emacs_mode_line",false)) println("// -*-opa-*-")
  copyright = List.to_string_using("/*\n    ", "\n*/", "\n    ", config.copyright)
  copyright =
    match (get_int_parameter(config,"since",0)) {
    case 0: copyright;
    case since:
      this_year = Date.get_year(Date.now())
      if (this_year - since <= 0)
        "{this_year}"
      else
        String.replace("%%SINCE%%","{since}-{this_year}",copyright)
    }
  println(copyright)
  println("// WARNING: This file has been generated by apigen.opa, DO NOT EDIT.")
  if (get_bool_parameter(config,"output_date",false)) println("// Date: {Date.to_string(Date.now())}")
  println("// Config file: {config_file.get()}")
  println("// Module name: {config.name}")
  endpoint = get_parameter(config, "endpoint", "")
  if (endpoint != "") println("// Endpoint: {endpoint}") else void
  println("// Endianness: {string_of_le(get_le(config))}")
  if (get_parameter(config, "oauth", "") != "") println("// OAuth: {get_oauth(config)}")
  println("// Style: {styled("JS-like","Classic")}")
  println(List.to_string_using("/** ", "\n */", "\n * ", config.docs))
  pkg = get_parameter(config,"package","")
  if (pkg != "") println("package {pkg}")
  println("import stdlib.core")
  println("import stdlib.apis.apigenlib")
  println("{prvt()} U = Pack.Unser")
  if (get_int_parameter(config,"debug",0) > 0)
    println("{prvt()} bindump = {typed("binary -> string","%% BslPervasives.bindump %%")}")
  println("")
}

function output_type(config config, name, params) {
  println("type {config.name}.{name} = \{")
  print(String.concat(",\n",List.map(function (param param) {
    function optional(t) { if (param.optional) { "option({t})" } else t }
    "  "^typed("{optional(string_of_typ(config, param.typ))}","{param.name}")
  },params)))
  println("\n\}\n")
}

function output_types(config config) {
  List.iter(function (ty) { output_type(config, ty.name, ty.params) }, config.types)
  List.iter(function (def) { output_type(config, "{def.name}_options", def.params) },config.defs)
}

function output_external_code(config config) {
  if (config.extcode != []) {
    print("// External code\n\n")
    List.iter(println,List.rev(config.extcode))
    print("\n// End external code\n\n")
  }
}

function run() {
  CommandLine.filter(args)
  //jlog("config_file={config_file.get()}")
  config = read_config()
  //jlog("config:{config}")
  output_header(config)
  output_types(config)
  mp = if (get_bool_parameter(config,"oauth",false)) { typed("OAuth.parameters","params") } else ""
  print(mod_start("",config.name,mp))
  output_api(config)
  output_messages(config)
  output_external_code(config)
  print(mod_end(""))
  println("// End of {config.name}\n")
  void
}

Scheduler.push(run)
